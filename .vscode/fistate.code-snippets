{
	"FiState Full": {
		"description": "Creates a Fi state with validator, validation errors, ",
		"prefix": "fifull",
		"scope": "dart",
		"body": [
			"abstract final class $1ValidationError {",
			"  const $1ValidationError();",
			"}",

			"final class $1ValidationErrorInvalid extends $1ValidationError {",
			"  const $1ValidationErrorInvalid();",

			"  @override",
			"  String toString() {",
			"    return '''$1 is invalid''';",
			"  }",
			"}",
			"",
			"final class $1ValidationErrorEmpty extends $1ValidationError {",
			"  const $1ValidationErrorEmpty();",
			"",
			"  @override",
			"  String toString() {",
			"    return '$1 is Required';",
			"  }",
			"}",
			"",
			"class $1Validator extends FiValidator<${2:String?}, $1ValidationError> {",
			"  const $1Validator();",
			"",
			"  @override",
			"  $1ValidationError? validate(${2:String?} value) {",
			"    if (value == null || value.isEmpty) {",
			"      return const $1ValidationErrorEmpty();",
			"    } else if (false) {",
			"	   // TODO: add invalid logic",
			"      return const $1ValidationErrorInvalid();",
			"    }",
			"",
			"    return null;",
			"  }",
			"}",
			"",
			"class $1FieldState extends FiStateBase<${2:String?}, $1ValidationError>",
			"    with FiCopyWithMixin<${2:String?}, $1ValidationError, $1FieldState> {",
			"  const $1FieldState({",
			"    required super.id,",
			"    required super.value,",
			"    required super.isPure,",
			"    required super.originalValue,",
			"  });",
			"  const $1FieldState.pure(super.value, {super.id}) : super.pure();",
			"  const $1FieldState.dirty(",
			"    super.value, {",
			"    required super.originalValue,",
			"    super.id,",
			"  }) : super.dirty();",
			"",
			"  @override",
			"  Object? valueToJson(${2:String?} value) => value;",
			"  static ${2:String?} valueFromJson(Object? src) => src as ${2:String?};",
			"",
			"  factory $1FieldState.fromParsed(FiSerializedState parsed) =>",
			"      $1FieldState(",
			"        id: parsed.id,",
			"        isPure: parsed.isPure,",
			"        originalValue: valueFromJson(parsed.originalValue),",
			"        value: valueFromJson(parsed.value),",
			"      );",
			"",
			"  factory $1FieldState.fromJson(Map<String, dynamic> src) =>",
			"      $1FieldState.fromParsed(FiSerializedState.fromJson(src));",
			"",
			"  @override",
			"  FiValidator<${2:String?}, $1ValidationError>? get validator =>",
			"      const $1Validator();",
			"",
			"  @override",
			"  $1FieldState copyWithAll({",
			"    required String id,",
			"    required bool isPure,",
			"    required ${2:String?} value,",
			"    required ${2:String?} originalValue,",
			"  }) {",
			"    return $1FieldState(",
			"      id: id,",
			"      value: value,",
			"      isPure: isPure,",
			"      originalValue: originalValue,",
			"    );",
			"  }",
			"}",
		]		
	},
	"FiState": {
		"description": "Creates a Fi state.",
		"prefix": "fistate",
		"scope": "dart",
		"body": [
			"class $1FieldState extends FiStateBase<${2:String?}, ${3:FiRequiredError}>",
			"    with FiCopyWithMixin<${2:String?}, ${3:FiRequiredError}, $1FieldState> {",
			"  const $1FieldState({",
			"    required super.id,",
			"    required super.value,",
			"    required super.isPure,",
			"    required super.originalValue,",
			"  });",
			"  const $1FieldState.pure(super.value, {super.id}) : super.pure();",
			"  const $1FieldState.dirty(",
			"    super.value, {",
			"    required super.originalValue,",
			"    super.id,",
			"  }) : super.dirty();",
			"",
			"  @override",
			"  Object? valueToJson(${2:String?} value) => value;",
			"  static ${2:String?} valueFromJson(Object? src) => src as ${2:String?};",
			"",
			"  factory $1FieldState.fromParsed(FiSerializedState parsed) =>",
			"      $1FieldState(",
			"        id: parsed.id,",
			"        isPure: parsed.isPure,",
			"        originalValue: valueFromJson(parsed.originalValue),",
			"        value: valueFromJson(parsed.value),",
			"      );",
			"",
			"  factory $1FieldState.fromJson(Map<String, dynamic> src) =>",
			"      $1FieldState.fromParsed(FiSerializedState.fromJson(src));",
			"",
			"  @override",
			"  FiValidator<${2:String?}, ${3:FiRequiredError}>? get validator =>",
			"      const ${4:FiRequiredValidator}();",
			"",
			"  @override",
			"  $1FieldState copyWithAll({",
			"    required String id,",
			"    required bool isPure,",
			"    required ${2:String?} value,",
			"    required ${2:String?} originalValue,",
			"  }) {",
			"    return $1FieldState(",
			"      id: id,",
			"      value: value,",
			"      isPure: isPure,",
			"      originalValue: originalValue,",
			"    );",
			"  }",
			"}",
		]	
	},
	"FiError": {
		"description": "Creates a Fi error + validator.",
		"prefix": "fierror",
		"scope": "dart",
		"body": [
			"abstract final class $1ValidationError {",
			"  const $1ValidationError();",
			"}",

			"final class $1ValidationErrorInvalid extends $1ValidationError {",
			"  const $1ValidationErrorInvalid();",

			"  @override",
			"  String toString() {",
			"    return '''$1 is invalid''';",
			"  }",
			"}",
			"",
			"final class $1ValidationErrorEmpty extends $1ValidationError {",
			"  const $1ValidationErrorEmpty();",
			"",
			"  @override",
			"  String toString() {",
			"    return '$1 is Required';",
			"  }",
			"}",
			"",
			"class $1Validator extends FiValidator<${2:String?}, $1ValidationError> {",
			"  const $1Validator();",
			"",
			"  @override",
			"  $1ValidationError? validate(${2:String?} value) {",
			"    if (value == null || value.isEmpty) {",
			"      return const $1ValidationErrorEmpty();",
			"    } else if (false) {",
			"	   // TODO: add invalid logic",
			"      return const $1ValidationErrorInvalid();",
			"    }",
			"",
			"    return null;",
			"  }",
			"}",
		]
	}
}